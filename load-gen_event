import os
import sys
sys.path.append(r'D:\PowerFactory2017\Python\3.6')##powerfactory python file
import powerfactory as pf
app=pf.GetApplication()
import random
import numpy as np
import pandas as pd
from pandas import DataFrame
import math

app.ClearOutputWindow()
user=app.GetCurrentUser()

###set the basic simulation##
def setupSimultation(comInc, comSim, start_time, stop_time, period):
  comInc.iopt_sim = "rms"#time domin simulation
  comInc.iopt_show = 0
  comInc.iopt_adapt = 0
  comInc.start = start_time
  comSim.tstop = stop_time
  comInc.dtgrd = period
##start_time=-0.1, stop_time=5s or 10s, period=0.01


##clear last fault_event
def clearSimEvents():
  faultFolder = app.GetFromStudyCase("Simulation Events/Fault.IntEvt")
  cont = faultFolder.GetContents()
  for obj in cont:
    obj.Delete()


## activate the simulation
def runSimulation(comInc, comSim):  ##
  app.EchoOff()
  comInc.Execute()
  app.EchoOn()
  comSim.Execute()
#############
def runSintial(comInc):  ##
  app.EchoOff()
  comInc.Execute()


def getResults(loc_fl,loadchange):      
    #get result file
    elmRes = app.GetFromStudyCase('*.ElmRes')    
    app.ResLoadData(elmRes)
    
    #Get number of rows and columns
    NrRow = app.ResGetValueCount(elmRes,0)
    app.PrintPlain(NrRow)
     
    #get objects of interest
    buses = app.GetCalcRelevantObjects('*.ElmTerm')
    lines = app.GetCalcRelevantObjects('*.ElmLne')
    SG = app.GetCalcRelevantObjects('*.ElmSym')
    load_list = app.GetCalcRelevantObjects('*.ElmLod')
    

    ColIndex_time = app.ResGetIndex(elmRes,elmRes,'b:tnow')
  
####################### SG data ##########################
 
    c= {}
    for oLoad in load_list :
        c=oLoad.scale0

    result_time = np.zeros((NrRow,))
    result_name = np.zeros((NrRow),dtype=object)
    result_lcge = np.zeros((NrRow,))

    
    for i in range(NrRow):
      result_time[i] = app.ResGetData(elmRes,i,ColIndex_time)[1]
      result_name[i] = loc_fl.loc_name
      result_lcge[i] = loadchange
      
    time=pd.DataFrame()
    time['time'] = result_time
    time['name'] = result_name
    time['lcge'] = result_lcge
########## SG data rotor angle ######### 
    ColIndex_u_sg = []
    result_sg = {}
    for i, g in enumerate(SG):
       a=g.loc_name
       ColIndex_u_sg.append(app.ResGetIndex(elmRes, g, 'c:firot'))
       result_sg[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for g, ColIndex in zip(SG, ColIndex_u_sg):
        a=g.loc_name
        result_sg[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]

########## SG data real power ######### 
    ColIndex_u_sgp = []
    result_sgp = {}
    for i, g in enumerate(SG):
       a=g.loc_name
       ColIndex_u_sg.append(app.ResGetIndex(elmRes, g, 's:P1'))
       result_sgp[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for g, ColIndex in zip(SG, ColIndex_u_sg):
        a=g.loc_name
        result_sgp[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]

################## bus data ############################ 

########### get bus voltage magnitude####
    ColIndex_u_bus = []
    result_busv = {}
    for i, bus in enumerate(buses):
       a=bus.loc_name
       ColIndex_u_bus.append(app.ResGetIndex(elmRes, bus, 'm:u1'))
       result_busv[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for bus, ColIndex in zip(buses, ColIndex_u_bus):
        a=bus.loc_name
        result_busv[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]

########### get bus voltage angle####
    ColIndex_u_bus = []
    result_busva = {}
    for i, bus in enumerate(buses):
       a=bus.loc_name
       ColIndex_u_bus.append(app.ResGetIndex(elmRes, bus, 'm:phiu'))
       result_busva[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for bus, ColIndex in zip(buses, ColIndex_u_bus):
        a=bus.loc_name
        result_busva[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]
        
########### get bus voltage freq####
    ColIndex_u_bus = []
    result_busvf = {}
    for i, bus in enumerate(buses):
       a=bus.loc_name
       ColIndex_u_bus.append(app.ResGetIndex(elmRes, bus, 'm:fehz'))
       result_busvf[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for bus, ColIndex in zip(buses, ColIndex_u_bus):
        a=bus.loc_name
        result_busvf[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]
        
########### get bus voltage freqd####
    ColIndex_u_bus = []
    result_busvfd = {}
    for i, bus in enumerate(buses):
       a=bus.loc_name
       ColIndex_u_bus.append(app.ResGetIndex(elmRes, bus, 'm:dfehz'))
       result_busvfd[a] = np.zeros(NrRow)

    for i in range(NrRow):
      for bus, ColIndex in zip(buses, ColIndex_u_bus):
        a=bus.loc_name
        result_busvfd[a][i] = app.ResGetData(elmRes, i, ColIndex)[1]


######################### data processing #############################
    sga=pd.DataFrame(result_sg)
    sgp=pd.DataFrame(result_sgp)

    
    busv = pd.DataFrame(result_busv)
    busva=pd.DataFrame(result_busva)
    busvf=pd.DataFrame(result_busvf)
    busvfd=pd.DataFrame(result_busvfd)
    
    
    new_columns = {col: 'a' + col for col in busva.columns}
    busva = busva.rename(columns=new_columns)
    
    new_columns = {col: 'f' + col for col in busvf.columns}
    busvf = busvf.rename(columns=new_columns)

    new_columns = {col: 'fd' + col for col in busvfd.columns}
    busvfd = busvfd.rename(columns=new_columns)


    results=pd.concat([time,sga],axis=1,ignore_index=False)
    results=pd.concat([results,busv],axis=1,ignore_index=False)
    results=pd.concat([results,busva],axis=1,ignore_index=False)
    results=pd.concat([results,busvf],axis=1,ignore_index=False)
    results=pd.concat([results,busvfd],axis=1,ignore_index=False)
    
    return results


#########################################

###add the fault event/clear the event
def addShcEvent(obj, load,loadchange,sec, faultType):
  faultFolder = app.GetFromStudyCase("Simulation Events/Fault.IntEvt")
  event = faultFolder.CreateObject("EvtLod", obj.loc_name)
  event.p_target = obj
  event.iopt_load = load
  event.dP=loadchange  # 0-100 %
  event.time = sec       #fault start time
  event.iopt_type = faultType#fault type (type0: 3 phase short fulat; type 4: clear the event )


def runload(obj):
  load_list = app.GetCalcRelevantObjects('*.ElmLod')
  
  random_element = obj
  ##choose the object
  element=random_element.loc_name
  loc_fl = random_element
  ##choose the object
  time = 0
  faultType = 0
  faulClear = 0
  loadchange = 20

  setupSimultation(comInc, comSim,0.1,5,0.001)
  addShcEvent(loc_fl, faulClear,loadchange,time, faultType)
  runSimulation(comInc, comSim)
  
  RES = getResults(loc_fl,loadchange)
  app.PrintPlain(RES)
  Data=pd.DataFrame(RES)
  app.PrintPlain(list(Data))
  Data.to_csv(r'D:\data1\39busloaddata.csv',mode='a', index = True) #Save the index labels to csv files
  runSintial(comInc)
  clearSimEvents()

def runload1(obj,pec):
  load_list = app.GetCalcRelevantObjects('*.ElmLod')
  random_element = obj
  ##choose the object
  element=random_element.loc_name
  loc_fl = random_element
  ##choose the object
  time = 0
  faultType = 0
  faulClear = 0
  loadchange = pec

  setupSimultation(comInc, comSim,0.1,5,0.001)
  addShcEvent(loc_fl, faulClear,loadchange,time, faultType)
  runSimulation(comInc, comSim)
  
  RES = getResults(loc_fl,loadchange)
  app.PrintPlain(RES)
  Data=pd.DataFrame(RES)
  app.PrintPlain(list(Data))
  Data.to_csv(r'D:\data1\39busloaddata.csv',mode='a', index = True) #Save the index labels to csv files
  runSintial(comInc)
  clearSimEvents()


def addgenEvent(obj,loadchange,sec, faultType):
  faultFolder = app.GetFromStudyCase("Simulation Events/Fault.IntEvt")
  event = faultFolder.CreateObject("EvtGen", obj.loc_name)
  event.p_target = obj
  event.dP=loadchange  # 0-100 %
  event.time = sec       #fault start time
  event.iopt_type = faultType#fault type (type0: 3 phase short fulat; type 4: clear the event )
def rungen(obj,pec):
  SG = app.GetCalcRelevantObjects('*.ElmSym')
  random_element = obj
  ##choose the object
  element=random_element.loc_name
  loc_fl = random_element
  ##choose the object
  time = 0
  faultType = 0
  faulClear = 0
  genchange = pec

  setupSimultation(comInc, comSim,0.1,5,0.001)
  addgenEvent(loc_fl, genchange,time, faultType)
  runSimulation(comInc, comSim)
  
  RES = getResults(loc_fl,loadchange)
  app.PrintPlain(RES)
  Data=pd.DataFrame(RES)
  app.PrintPlain(list(Data))
  Data.to_csv(r'D:\data1\39busloaddata.csv',mode='a', index = True) #Save the index labels to csv files
  runSintial(comInc)
  clearSimEvents()
############################### Run simlation #############################################
##option model,study case
projName='39 Bus New England System1'
study_case='Simulation Fault Bus 16 Stable.IntCase'


project = app.ActivateProject(projName)
proj = app.GetActiveProject()
Folder_studycase = app.GetProjectFolder('study')

##
Case = Folder_studycase.GetContents(study_case)

comInc = app.GetFromStudyCase('ComInc')
comSim = app.GetFromStudyCase('ComSim')

elmRes = app.GetFromStudyCase('*.ElmRes')
app.ResLoadData(elmRes)

load_list = app.GetCalcRelevantObjects('*.ElmLod')    
runload(load_list[1])



